// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package logs

import (
	"context"
	"github.com/auth0/go-auth0/management"
	"sync"
)

// Ensure, that logManagementMock does implement logManagement.
// If this is not the case, regenerate this file with moq.
var _ logManagement = &logManagementMock{}

// logManagementMock is a mock implementation of logManagement.
//
//	func TestSomethingThatUseslogManagement(t *testing.T) {
//
//		// make and configure a mocked logManagement
//		mockedlogManagement := &logManagementMock{
//			ListFunc: func(ctx context.Context, opts ...management.RequestOption) ([]*management.Log, error) {
//				panic("mock out the List method")
//			},
//			ReadFunc: func(ctx context.Context, id string, opts ...management.RequestOption) (*management.Log, error) {
//				panic("mock out the Read method")
//			},
//			SearchFunc: func(ctx context.Context, opts ...management.RequestOption) ([]*management.Log, error) {
//				panic("mock out the Search method")
//			},
//		}
//
//		// use mockedlogManagement in code that requires logManagement
//		// and then make assertions.
//
//	}
type logManagementMock struct {
	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, opts ...management.RequestOption) ([]*management.Log, error)

	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context, id string, opts ...management.RequestOption) (*management.Log, error)

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, opts ...management.RequestOption) ([]*management.Log, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []management.RequestOption
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Opts is the opts argument value.
			Opts []management.RequestOption
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []management.RequestOption
		}
	}
	lockList   sync.RWMutex
	lockRead   sync.RWMutex
	lockSearch sync.RWMutex
}

// List calls ListFunc.
func (mock *logManagementMock) List(ctx context.Context, opts ...management.RequestOption) ([]*management.Log, error) {
	if mock.ListFunc == nil {
		panic("logManagementMock.ListFunc: method is nil but logManagement.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts []management.RequestOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, opts...)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedlogManagement.ListCalls())
func (mock *logManagementMock) ListCalls() []struct {
	Ctx  context.Context
	Opts []management.RequestOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []management.RequestOption
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *logManagementMock) Read(ctx context.Context, id string, opts ...management.RequestOption) (*management.Log, error) {
	if mock.ReadFunc == nil {
		panic("logManagementMock.ReadFunc: method is nil but logManagement.Read was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		Opts []management.RequestOption
	}{
		Ctx:  ctx,
		ID:   id,
		Opts: opts,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx, id, opts...)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedlogManagement.ReadCalls())
func (mock *logManagementMock) ReadCalls() []struct {
	Ctx  context.Context
	ID   string
	Opts []management.RequestOption
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		Opts []management.RequestOption
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *logManagementMock) Search(ctx context.Context, opts ...management.RequestOption) ([]*management.Log, error) {
	if mock.SearchFunc == nil {
		panic("logManagementMock.SearchFunc: method is nil but logManagement.Search was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts []management.RequestOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, opts...)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedlogManagement.SearchCalls())
func (mock *logManagementMock) SearchCalls() []struct {
	Ctx  context.Context
	Opts []management.RequestOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []management.RequestOption
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

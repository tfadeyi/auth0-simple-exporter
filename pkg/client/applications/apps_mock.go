// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package applications

import (
	"context"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			ListFunc: func(ctx context.Context, args ...interface{}) (interface{}, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, args ...interface{}) (interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockList sync.RWMutex
}

// List calls ListFunc.
func (mock *ClientMock) List(ctx context.Context, args ...interface{}) (interface{}, error) {
	if mock.ListFunc == nil {
		panic("ClientMock.ListFunc: method is nil but Client.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args []interface{}
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, args...)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedClient.ListCalls())
func (mock *ClientMock) ListCalls() []struct {
	Ctx  context.Context
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		Args []interface{}
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

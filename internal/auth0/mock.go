// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth0

import (
	"context"
	"sync"
	"time"
)

// Ensure, that FetcherMock does implement Fetcher.
// If this is not the case, regenerate this file with moq.
var _ Fetcher = &FetcherMock{}

// FetcherMock is a mock implementation of Fetcher.
//
//	func TestSomethingThatUsesFetcher(t *testing.T) {
//
//		// make and configure a mocked Fetcher
//		mockedFetcher := &FetcherMock{
//			FetchAllFunc: func(ctx context.Context, startTime time.Time) (interface{}, error) {
//				panic("mock out the FetchAll method")
//			},
//		}
//
//		// use mockedFetcher in code that requires Fetcher
//		// and then make assertions.
//
//	}
type FetcherMock struct {
	// FetchAllFunc mocks the FetchAll method.
	FetchAllFunc func(ctx context.Context, startTime time.Time) (interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchAll holds details about calls to the FetchAll method.
		FetchAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StartTime is the startTime argument value.
			StartTime time.Time
		}
	}
	lockFetchAll sync.RWMutex
}

// FetchAll calls FetchAllFunc.
func (mock *FetcherMock) FetchAll(ctx context.Context, startTime time.Time) (interface{}, error) {
	if mock.FetchAllFunc == nil {
		panic("FetcherMock.FetchAllFunc: method is nil but Fetcher.FetchAll was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		StartTime time.Time
	}{
		Ctx:       ctx,
		StartTime: startTime,
	}
	mock.lockFetchAll.Lock()
	mock.calls.FetchAll = append(mock.calls.FetchAll, callInfo)
	mock.lockFetchAll.Unlock()
	return mock.FetchAllFunc(ctx, startTime)
}

// FetchAllCalls gets all the calls that were made to FetchAll.
// Check the length with:
//
//	len(mockedFetcher.FetchAllCalls())
func (mock *FetcherMock) FetchAllCalls() []struct {
	Ctx       context.Context
	StartTime time.Time
} {
	var calls []struct {
		Ctx       context.Context
		StartTime time.Time
	}
	mock.lockFetchAll.RLock()
	calls = mock.calls.FetchAll
	mock.lockFetchAll.RUnlock()
	return calls
}
